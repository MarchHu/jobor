// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: internal/proto/jobor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Response_StatusCode int32

const (
	Response_UNDEFINED Response_StatusCode = 0
	Response_SUCCESS   Response_StatusCode = 200
	Response_FAILURE   Response_StatusCode = 500
)

// Enum value maps for Response_StatusCode.
var (
	Response_StatusCode_name = map[int32]string{
		0:   "UNDEFINED",
		200: "SUCCESS",
		500: "FAILURE",
	}
	Response_StatusCode_value = map[string]int32{
		"UNDEFINED": 0,
		"SUCCESS":   200,
		"FAILURE":   500,
	}
)

func (x Response_StatusCode) Enum() *Response_StatusCode {
	p := new(Response_StatusCode)
	*p = x
	return p
}

func (x Response_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Response_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_jobor_proto_enumTypes[0].Descriptor()
}

func (Response_StatusCode) Type() protoreflect.EnumType {
	return &file_internal_proto_jobor_proto_enumTypes[0]
}

func (x Response_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Response_StatusCode.Descriptor instead.
func (Response_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_jobor_proto_rawDescGZIP(), []int{4, 0}
}

//stream请求结构
type StreamReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StreamReqData) Reset() {
	*x = StreamReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_jobor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReqData) ProtoMessage() {}

func (x *StreamReqData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_jobor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReqData.ProtoReflect.Descriptor instead.
func (*StreamReqData) Descriptor() ([]byte, []int) {
	return file_internal_proto_jobor_proto_rawDescGZIP(), []int{0}
}

func (x *StreamReqData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

//stream返回结构
type StreamResData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StreamResData) Reset() {
	*x = StreamResData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_jobor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResData) ProtoMessage() {}

func (x *StreamResData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_jobor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResData.ProtoReflect.Descriptor instead.
func (*StreamResData) Descriptor() ([]byte, []int) {
	return file_internal_proto_jobor_proto_rawDescGZIP(), []int{1}
}

func (x *StreamResData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// The request message containing the user's name.
type TaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId   int32  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskType int32  `protobuf:"varint,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	TaskLang string `protobuf:"bytes,3,opt,name=task_lang,json=taskLang,proto3" json:"task_lang,omitempty"`
	TaskData []byte `protobuf:"bytes,4,opt,name=task_data,json=taskData,proto3" json:"task_data,omitempty"`
	Name     string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_jobor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_jobor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_jobor_proto_rawDescGZIP(), []int{2}
}

func (x *TaskRequest) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskRequest) GetTaskType() int32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *TaskRequest) GetTaskLang() string {
	if x != nil {
		return x.TaskLang
	}
	return ""
}

func (x *TaskRequest) GetTaskData() []byte {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *TaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The response message
type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_jobor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_jobor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_internal_proto_jobor_proto_rawDescGZIP(), []int{3}
}

func (x *Reply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Response_StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=jobor.Response_StatusCode" json:"code,omitempty"`
	Msg  *Reply              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *Reply              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_jobor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_jobor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_internal_proto_jobor_proto_rawDescGZIP(), []int{4}
}

func (x *Response) GetCode() Response_StatusCode {
	if x != nil {
		return x.Code
	}
	return Response_UNDEFINED
}

func (x *Response) GetMsg() *Reply {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *Response) GetData() *Reply {
	if x != nil {
		return x.Data
	}
	return nil
}

type StreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp []byte `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *StreamResponse) Reset() {
	*x = StreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_jobor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponse) ProtoMessage() {}

func (x *StreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_jobor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponse.ProtoReflect.Descriptor instead.
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_jobor_proto_rawDescGZIP(), []int{5}
}

func (x *StreamResponse) GetResp() []byte {
	if x != nil {
		return x.Resp
	}
	return nil
}

type RegistryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port       int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Weight     int32  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Hostname   string `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Version    string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	HostGroup  string `protobuf:"bytes,6,opt,name=hostGroup,proto3" json:"hostGroup,omitempty"`
	Remark     string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	RoutingKey string `protobuf:"bytes,8,opt,name=routingKey,proto3" json:"routingKey,omitempty"`
}

func (x *RegistryReq) Reset() {
	*x = RegistryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_jobor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryReq) ProtoMessage() {}

func (x *RegistryReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_jobor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryReq.ProtoReflect.Descriptor instead.
func (*RegistryReq) Descriptor() ([]byte, []int) {
	return file_internal_proto_jobor_proto_rawDescGZIP(), []int{6}
}

func (x *RegistryReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RegistryReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RegistryReq) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *RegistryReq) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RegistryReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RegistryReq) GetHostGroup() string {
	if x != nil {
		return x.HostGroup
	}
	return ""
}

func (x *RegistryReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RegistryReq) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

type HeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string ip = 1;
	Port        int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	RunningTask []string `protobuf:"bytes,3,rep,name=running_task,json=runningTask,proto3" json:"running_task,omitempty"`
}

func (x *HeartbeatReq) Reset() {
	*x = HeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_jobor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatReq) ProtoMessage() {}

func (x *HeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_jobor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatReq.ProtoReflect.Descriptor instead.
func (*HeartbeatReq) Descriptor() ([]byte, []int) {
	return file_internal_proto_jobor_proto_rawDescGZIP(), []int{7}
}

func (x *HeartbeatReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HeartbeatReq) GetRunningTask() []string {
	if x != nil {
		return x.RunningTask
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_jobor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_jobor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_internal_proto_jobor_proto_rawDescGZIP(), []int{8}
}

var File_internal_proto_jobor_proto protoreflect.FileDescriptor

var file_internal_proto_jobor_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6a, 0x6f,
	0x62, 0x6f, 0x72, 0x22, 0x23, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01,
	0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x61, 0x6e, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x21, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xc8, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0xf4, 0x03, 0x22, 0x24, 0x0a, 0x0e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x65,
	0x73, 0x70, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x45, 0x0a, 0x0c, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73,
	0x6b, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xb1, 0x02, 0x0a, 0x0b, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x75,
	0x6e, 0x52, 0x50, 0x43, 0x12, 0x12, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x52,
	0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6a, 0x6f, 0x62,
	0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x14, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x14, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x50, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x14, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x14, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x3d, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x6a,
	0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x14, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x77,
	0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x2e,
	0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x0c, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x12, 0x13, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_proto_jobor_proto_rawDescOnce sync.Once
	file_internal_proto_jobor_proto_rawDescData = file_internal_proto_jobor_proto_rawDesc
)

func file_internal_proto_jobor_proto_rawDescGZIP() []byte {
	file_internal_proto_jobor_proto_rawDescOnce.Do(func() {
		file_internal_proto_jobor_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_proto_jobor_proto_rawDescData)
	})
	return file_internal_proto_jobor_proto_rawDescData
}

var file_internal_proto_jobor_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_internal_proto_jobor_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_internal_proto_jobor_proto_goTypes = []interface{}{
	(Response_StatusCode)(0), // 0: jobor.Response.StatusCode
	(*StreamReqData)(nil),    // 1: jobor.StreamReqData
	(*StreamResData)(nil),    // 2: jobor.StreamResData
	(*TaskRequest)(nil),      // 3: jobor.TaskRequest
	(*Reply)(nil),            // 4: jobor.Reply
	(*Response)(nil),         // 5: jobor.Response
	(*StreamResponse)(nil),   // 6: jobor.StreamResponse
	(*RegistryReq)(nil),      // 7: jobor.RegistryReq
	(*HeartbeatReq)(nil),     // 8: jobor.HeartbeatReq
	(*Empty)(nil),            // 9: jobor.Empty
}
var file_internal_proto_jobor_proto_depIdxs = []int32{
	0,  // 0: jobor.Response.code:type_name -> jobor.Response.StatusCode
	4,  // 1: jobor.Response.msg:type_name -> jobor.Reply
	4,  // 2: jobor.Response.data:type_name -> jobor.Reply
	3,  // 3: jobor.TaskService.RunRPC:input_type -> jobor.TaskRequest
	3,  // 4: jobor.TaskService.RunTask:input_type -> jobor.TaskRequest
	1,  // 5: jobor.TaskService.GetStream:input_type -> jobor.StreamReqData
	1,  // 6: jobor.TaskService.PutStream:input_type -> jobor.StreamReqData
	1,  // 7: jobor.TaskService.AllStream:input_type -> jobor.StreamReqData
	7,  // 8: jobor.Heartbeat.RegistryWorker:input_type -> jobor.RegistryReq
	8,  // 9: jobor.Heartbeat.SendHeartbeat:input_type -> jobor.HeartbeatReq
	5,  // 10: jobor.TaskService.RunRPC:output_type -> jobor.Response
	6,  // 11: jobor.TaskService.RunTask:output_type -> jobor.StreamResponse
	2,  // 12: jobor.TaskService.GetStream:output_type -> jobor.StreamResData
	2,  // 13: jobor.TaskService.PutStream:output_type -> jobor.StreamResData
	2,  // 14: jobor.TaskService.AllStream:output_type -> jobor.StreamResData
	9,  // 15: jobor.Heartbeat.RegistryWorker:output_type -> jobor.Empty
	9,  // 16: jobor.Heartbeat.SendHeartbeat:output_type -> jobor.Empty
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_internal_proto_jobor_proto_init() }
func file_internal_proto_jobor_proto_init() {
	if File_internal_proto_jobor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_proto_jobor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_jobor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_jobor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_jobor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_jobor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_jobor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_jobor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_jobor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_jobor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_proto_jobor_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_internal_proto_jobor_proto_goTypes,
		DependencyIndexes: file_internal_proto_jobor_proto_depIdxs,
		EnumInfos:         file_internal_proto_jobor_proto_enumTypes,
		MessageInfos:      file_internal_proto_jobor_proto_msgTypes,
	}.Build()
	File_internal_proto_jobor_proto = out.File
	file_internal_proto_jobor_proto_rawDesc = nil
	file_internal_proto_jobor_proto_goTypes = nil
	file_internal_proto_jobor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	// 定义服务
	RunRPC(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*Response, error)
	RunTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (TaskService_RunTaskClient, error)
	GetStream(ctx context.Context, in *StreamReqData, opts ...grpc.CallOption) (TaskService_GetStreamClient, error)
	PutStream(ctx context.Context, opts ...grpc.CallOption) (TaskService_PutStreamClient, error)
	AllStream(ctx context.Context, opts ...grpc.CallOption) (TaskService_AllStreamClient, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) RunRPC(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/jobor.TaskService/RunRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RunTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (TaskService_RunTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaskService_serviceDesc.Streams[0], "/jobor.TaskService/RunTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServiceRunTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskService_RunTaskClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type taskServiceRunTaskClient struct {
	grpc.ClientStream
}

func (x *taskServiceRunTaskClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskServiceClient) GetStream(ctx context.Context, in *StreamReqData, opts ...grpc.CallOption) (TaskService_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaskService_serviceDesc.Streams[1], "/jobor.TaskService/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServiceGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskService_GetStreamClient interface {
	Recv() (*StreamResData, error)
	grpc.ClientStream
}

type taskServiceGetStreamClient struct {
	grpc.ClientStream
}

func (x *taskServiceGetStreamClient) Recv() (*StreamResData, error) {
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskServiceClient) PutStream(ctx context.Context, opts ...grpc.CallOption) (TaskService_PutStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaskService_serviceDesc.Streams[2], "/jobor.TaskService/PutStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServicePutStreamClient{stream}
	return x, nil
}

type TaskService_PutStreamClient interface {
	Send(*StreamReqData) error
	CloseAndRecv() (*StreamResData, error)
	grpc.ClientStream
}

type taskServicePutStreamClient struct {
	grpc.ClientStream
}

func (x *taskServicePutStreamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskServicePutStreamClient) CloseAndRecv() (*StreamResData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskServiceClient) AllStream(ctx context.Context, opts ...grpc.CallOption) (TaskService_AllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaskService_serviceDesc.Streams[3], "/jobor.TaskService/AllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServiceAllStreamClient{stream}
	return x, nil
}

type TaskService_AllStreamClient interface {
	Send(*StreamReqData) error
	Recv() (*StreamResData, error)
	grpc.ClientStream
}

type taskServiceAllStreamClient struct {
	grpc.ClientStream
}

func (x *taskServiceAllStreamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskServiceAllStreamClient) Recv() (*StreamResData, error) {
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	// 定义服务
	RunRPC(context.Context, *TaskRequest) (*Response, error)
	RunTask(*TaskRequest, TaskService_RunTaskServer) error
	GetStream(*StreamReqData, TaskService_GetStreamServer) error
	PutStream(TaskService_PutStreamServer) error
	AllStream(TaskService_AllStreamServer) error
}

// UnimplementedTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (*UnimplementedTaskServiceServer) RunRPC(context.Context, *TaskRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRPC not implemented")
}
func (*UnimplementedTaskServiceServer) RunTask(*TaskRequest, TaskService_RunTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (*UnimplementedTaskServiceServer) GetStream(*StreamReqData, TaskService_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedTaskServiceServer) PutStream(TaskService_PutStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PutStream not implemented")
}
func (*UnimplementedTaskServiceServer) AllStream(TaskService_AllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllStream not implemented")
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_RunRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RunRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobor.TaskService/RunRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RunRPC(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RunTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServiceServer).RunTask(m, &taskServiceRunTaskServer{stream})
}

type TaskService_RunTaskServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type taskServiceRunTaskServer struct {
	grpc.ServerStream
}

func (x *taskServiceRunTaskServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskService_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReqData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServiceServer).GetStream(m, &taskServiceGetStreamServer{stream})
}

type TaskService_GetStreamServer interface {
	Send(*StreamResData) error
	grpc.ServerStream
}

type taskServiceGetStreamServer struct {
	grpc.ServerStream
}

func (x *taskServiceGetStreamServer) Send(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskService_PutStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServiceServer).PutStream(&taskServicePutStreamServer{stream})
}

type TaskService_PutStreamServer interface {
	SendAndClose(*StreamResData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type taskServicePutStreamServer struct {
	grpc.ServerStream
}

func (x *taskServicePutStreamServer) SendAndClose(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskServicePutStreamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TaskService_AllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServiceServer).AllStream(&taskServiceAllStreamServer{stream})
}

type TaskService_AllStreamServer interface {
	Send(*StreamResData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type taskServiceAllStreamServer struct {
	grpc.ServerStream
}

func (x *taskServiceAllStreamServer) Send(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskServiceAllStreamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobor.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunRPC",
			Handler:    _TaskService_RunRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunTask",
			Handler:       _TaskService_RunTask_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStream",
			Handler:       _TaskService_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutStream",
			Handler:       _TaskService_PutStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllStream",
			Handler:       _TaskService_AllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/jobor.proto",
}

// HeartbeatClient is the client API for Heartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartbeatClient interface {
	// registry worker
	RegistryWorker(ctx context.Context, in *RegistryReq, opts ...grpc.CallOption) (*Empty, error)
	// SendHeartbeat send to server req to itself alive
	SendHeartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*Empty, error)
}

type heartbeatClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartbeatClient(cc grpc.ClientConnInterface) HeartbeatClient {
	return &heartbeatClient{cc}
}

func (c *heartbeatClient) RegistryWorker(ctx context.Context, in *RegistryReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/jobor.Heartbeat/RegistryWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heartbeatClient) SendHeartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/jobor.Heartbeat/SendHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeatServer is the server API for Heartbeat service.
type HeartbeatServer interface {
	// registry worker
	RegistryWorker(context.Context, *RegistryReq) (*Empty, error)
	// SendHeartbeat send to server req to itself alive
	SendHeartbeat(context.Context, *HeartbeatReq) (*Empty, error)
}

// UnimplementedHeartbeatServer can be embedded to have forward compatible implementations.
type UnimplementedHeartbeatServer struct {
}

func (*UnimplementedHeartbeatServer) RegistryWorker(context.Context, *RegistryReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryWorker not implemented")
}
func (*UnimplementedHeartbeatServer) SendHeartbeat(context.Context, *HeartbeatReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}

func RegisterHeartbeatServer(s *grpc.Server, srv HeartbeatServer) {
	s.RegisterService(&_Heartbeat_serviceDesc, srv)
}

func _Heartbeat_RegistryWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).RegistryWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobor.Heartbeat/RegistryWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).RegistryWorker(ctx, req.(*RegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heartbeat_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobor.Heartbeat/SendHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).SendHeartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heartbeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobor.Heartbeat",
	HandlerType: (*HeartbeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistryWorker",
			Handler:    _Heartbeat_RegistryWorker_Handler,
		},
		{
			MethodName: "SendHeartbeat",
			Handler:    _Heartbeat_SendHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/jobor.proto",
}
